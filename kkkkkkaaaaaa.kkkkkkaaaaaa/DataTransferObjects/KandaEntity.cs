namespace kkkkkkaaaaaa.DataTransferObjects
{
    /// <summary>
    /// オブジェクトの中には、主要な定義が属性によってなされないものもある。そういうオブジェクトは同一性のつながりを表現するのであり、その同一性は、時間が経っても、異なるかたちで表現されても変わらない。そういうオブジェクトは属性が異なっていても、他のオブジェクトと一致しなければならないことがある。また、あるオブジェクトは、同じ属性を持っていたとしても、他のオブジェクトと区別しなければならない。同一性を取り違えるとデータの破損につながりかねない。
    /// 
    /// 「エンティティ（ENTITIES）（別名　参照オブジェクト（REFERENCE OBJECTS））」pp87-94
    /// 
    /// 
    /// エンティティの同一性を追跡するのは本質的なことだが、それ以外のオブジェクトに同一性を与えてしまうと、システムの性能を損なうことになり、分析作業が増え、さらに、すべてのオブジェクトの見た目が同じになってしまうことでモデルが台無しになりかねない。
    /// 
    /// ソフトウェア設計は、複雑さとの恒常的な戦いである。特別な処理が必要な場所だけで行われるように、区別しなければならない。
    /// 
    /// しかし、このオブジェクトのカテゴリを、単に同一性のないものと見なしてしまうと、我々の使えるツールや語彙は大して増えない。実のところ、これらのオブジェクトには、独自の特徴とモデルに対する独自の意味がある。これは物事を記述するオブジェクトなのだ。
    /// 
    /// 「値オブジェクト（VALUE OBJECTS）」pp95-102
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class KandaEntity//<T>
    {
        //public abstract T ID { get; set; }
    }
}